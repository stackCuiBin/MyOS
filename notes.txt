第一课 进阶操作系统
1，什么是操作系统？
	Windows Unix Linux MacOS iOS
	操作系统是直接运行于硬件之上的计算机程序
	操作系统是用于管理和控制计算机的硬件与软件资源
	操作系统为用户软件的开发提供必要的服务和接口
	
2，BIOS - Base Input & Output System
	BIOS是计算机上电后第一个运行的程序
	BIOS首先检测硬件状态，检测通过后立即进行硬件初始化
	BIOS会在内存中建立中断向量表(提供硬件访问的方法)
	BIOS最后将控制权交由主引导程序执行
	
	注意
		BIOS不是软件(software)，而是固件(firmware)
		固件是固化于硬件中的程序，在硬件出厂前已经烧写固定
		
3，系统启动流程(X86架构)
	上电 -> 运行BIOS -> 硬件初始化 -> 建立中断向量表 -> 加载运行主引导程序 
	-> 软件初始化 -> 加载运行操作系统内核 -> 系统初始化 -> ...
	
4，BIOS是怎么运行起来的呢？
	BIOS的运行机制
		BIOS存储于ROM中，地址映射为0xF0000 - 0xFFFFF (实地址)
		BIOS的入口地址为：0xFFFF0
		硬件电路的特殊设计使得：开机后，CPU从0xFFFF0处开始执行
		
	BIOS最后的使命
		按照用户设置扫描各个存储介质(光驱，软驱，U盘，等)
		发现主引导程序后，将主引导区的中主引导程序载入内存
		主引导程序在内存中的入口地址为0x7c00
		将控制权交由主引导程序执行(jmp 0x7c00)
		
5，思考
	BIOS如何在存储介质中寻找主引导区？
	如何判断引导区中有没有主引导程序？
	
	主引导区(MBR: Master Boot Record)
		位置：位于存储介质的最开始位置处，大小为512字节
		特点：前512字节的最后2个有效字节为0x55aa
		数据：0x55aa之前的数据被视为主引导程序
	
	更详细的系统启动流程(x86架构)
	上电 -> 运行BIOS -> 光驱存在MBR? -> 软驱存在MBR? -> 硬盘存在MBR? -> ERROR
	 					yes |			yes|			yes|
	--------------------------------------------------------
	|-> 加载主引导程序 Addr:0x7c00 -> jmp 0x7c00 -> 软件初始化 
	-> 加载运行操作系统内核 -> 系统初始化 -> run
	
第2课 Hello DTOS
1，问题
	主引导程序是软件还是固件？如果时软件，那么由谁开发？如何开发？
	
	主引导程序
		一段存储在主引导区(MBR)中的有效代码
		并不固化于硬件，属于操作系统代码的一部分
		启动操作系统内核的桥梁，由汇编程序写成
		代码总量不能超过512个字节(包含0x55aa)
		
2，课程实验
	编写一个主引导程序(汇编语言)
	可独立运行于x86架构的主机(无操作系统)
	运行后在屏幕上打印"hello DTOS"
	
	实现思路
		将关键寄存器的值设置为0 (mov ax, 0)
		定义需要打印的数据(db "hello DTOS")
		打印预定义好的字符数据(int 0x10)
		
	汇编小贴士
		mov:赋值操作，将右操作数赋值给左操作数
			mov ax, 0 ;将0赋值给ax寄存器
		int:触发中断
			int 0x10 ;触发0x10中断，对屏幕进行操作
		hlt:停止运行，CPU进入暂停状态，不执行任何操作
			hlt ;使程序进入睡眠状态
		汇编中地址的访问方式：段地址：段内偏移地址
			mov byte [0xb800:0x01], 0x07 ; 0xb800:0x01 -> 0xb800 + 0x01
		标签
			用于标识后续指令的地址(可等同为C语言中的标签)
		$ VS $$
			$表示当前指令行地址，$$表示当前汇编段起始地址
			
		中断调用 VS 函数调用
			1: mov bx, 0x0f
			2: mov ah, 0x0e
			3: mov al, 'c'
			4: int 0x10
			
			printf("%c", 'c');
			1和2行相当于参数"%c"
			3行中的'c'相当于'c'
			int 0x10功能标识，相当于printf
			
3，如何测试程序？
	解决方案设计
		将汇编代码编译为二进制机器码(nasm)
		创建虚拟盘(bximage)
		将二进制代码写入虚拟盘起始位置(dd)
		在虚拟机中将虚拟盘作为启动盘执行(vmware)
		
	实验原材料
		nasm
			nasm boot.asm -o boot.bin
		bximage
			bximage a.img -q -fd -size=1.44
		dd
			dd if=boot.bin of=a.img bs=512 count=1 conv=notrunc
			
小结
	主引导程序的代码量不能超过512字节
	主引导程序需要使用汇编语言开发
	主引导程序中可以通过BIOS中断使用硬件功能
	主引导程序运行于实模式(地址都是实际的物理地址)
	
第3课 调试环境搭建
1，问题
	如何调试主引导区的代码？
	
2，Bochs(另一款优秀的虚拟机软件)
	专业模拟x86架构的虚拟机
	开源且高度可移植，由C++编写完成
	支持操作系统开发过程中的断点调试
	通过简单配置就能够运行于绝大多数主流的操作系统
	
	小贴士
		确定bochs的安装路径(which bochs)
		安装vgabios (apt-get install vgabios)
		确定vgabios的安装路径(whereis vgabios)
		
	bochs的启动文件
	启动bochs虚拟机
		显示方式：bochs -f bochsrc_file
		隐式方式：bochs (在当前目录下查找以下三个文件)
			.bochsrc
			bochsrc
			bochsrc.txt
			
3，bochs中的常用调试命令
	b(break)			设置断点				b 0x7c00
	c(continue)			继续执行				c
	s(step)				单步执行				s
	info b(break)		查看当前所有断点		info b
	info cpu			查看当前CPU状态		info cpu
	r(reg)				查看常规寄存器状态	r
	sreg				查看段寄存器状态		sreg
	x /Nuf expression	查看内存中的数据		x /2bx 0x7c00
	trace on[off]		开关：打印执行的指令	trace on
	trace-reg on[off]	开关：打印寄存器的值	trace-reg on
	
第4课 主引导程序的扩展-上
1，限制
	主引导程序的代码量不能超过512字节
	
	突破限制的思路
		主引导程序
			完成最基本的初始化工作
			从存储介质中加载程序到内存中
			将控制权交由新加载的程序执行
			......
		
2，问题
	主引导程序如何加载存储介质中的其它程序？
	
	文件系统
		存储介质上组织文件数据的方法(数据组织的方式)
		FAT12文件格式
			数据区
			根目录区
			FAT2
			FAT1
			引导扇区
			
	文件系统示例
		FAT12是DOS时代的早期文件系统
		FAT12结构非常简单，一直沿用于软盘
		FAT12的基本组织单位
			字节(byte)：基本数据单位
			扇区(Sector)：磁盘中的最小数据单元
			簇(Cluster)：一个或多个扇区
			
	解决方案
		使用FAT12对软盘进行格式化
		编写可执行程序(Loader)，并将其拷贝到软盘中
		主引导程序(Boot)在文件系统中查找Loader
		将Loader复制到内存中，并跳转到入口处执行
		
	实验：往虚拟软盘中写入文件
		原材料：FreeDOS，Bochs，bximage
		步骤：
			创建虚拟软盘data.img
			在FreeDos中进行格式化(FAT12)
			将data.img挂载到Linux中，并写入文件
			
	下一步的工作
		Boot查找目标文件(Loader)，并读取文件的内容
		
3，深入FAT12文件系统
	FAT12文件系统由引导区，FAT表，根目录项表和文件数据区组成
		扇区位置		长度			内容
		  0			1(512 B)	引导程序
		  1			9(4608 B)	FAT表1
		  10		9(4608 B)	FAT表2
		  19		14(9728 B)	目录文件项
		  33		----		文件数据
		  
	FAT12的主引导区
		主引导区存储的比较重要的信息是文件系统的类型，文件系统逻辑扇区总数，
		每簇包含的扇区数，等。主引导区最后以0x55aa两个字节作为结束，共占用一个扇区。
		
4，实验：读取data.img中的文件系统信息
	步骤：
		创建Fat12Header结构体类型
		使用文件流读取前512字节的内容
		解析并打印相关的信息
		
	实验结论
		(1) FreeDos中的format程序在格式化软盘的时候自动在第0扇区生成了一个主引导程序，
			这个主引导程序只打印一个字符串
		(2) 文件格式和文件系统都是用于定于数据如何存放的规则，只要遵循这个规则就能够成功
			读写目标数据
			
小结
	主引导程序的代码量不能超过512字节
	可以通过主引导程序加载新程序的方式突破限制
	加载新程序需要依赖于文件系统
	FAT12是一种早期用于软盘的简单文件系统
	FAT12文件系统的重要信息存储于0扇区
	
第5课 主引导程序的扩展-下
1，问题
	如何在FAT12根目录中查找是否存在目标文件？
	
	根目录区的大小和位置
		大小：	BPB_RootEntCnt * sizeof(RootEntry)
				----------------------------------
						BPB_BytsPerSec
		位置：在第19个扇区的起始位置
	
	FAT12文件系统中的根目录区
		根目录区由目录项构成，每一个目录项代表根目录中的一个文件索引。
		数据成员			偏移		长度		描述
		DIR_Name		0x00	0x0B	文件名8字节，扩展名3字节
		DIR_Attr		0x0B	0x01	文件属性
		Reserve			0x0C	0x0A	保留位
		DIR_WrtTime		0x16	0x02	最后一次写入时间
		DIR_WrtDate		0x18	0x02	最后一次写入日期
		DIR_FstClus		0x1A	0x02	文件开始的簇号(在FAT12中1簇是1扇区)
		DIR_FileSize	0x1C	0x04	文件大小
		(RootEntry数据结构共32字节)
		
	实验：读取FAT12文件系统的根目录信息
		步骤：
			创建RootEntry结构体类型
			使用文件流顺序读取每个目录项的内容
			解析并打印相关的信息
			
2，目录项中的关键成员
	DIR_Name
		文件名(用于判断是否为目标文件)
	DIR_FstClus
		文件数据起始存储位置(用于确定读取位置)
	DIR_FileSize
		文件大小(用于确定读取的字节数)
		
3，FAT表-FAT12的数据组织核心
	FAT1和FAT2是相互备份的关系，数据内容完全一致
	FAT表是一个关系图，记录了文件数据的先后关系
	每一个FAT表占用12比特
	FAT表的前2个表规定不能使用
	
	FAT表中的先后关系
		以簇(扇区)为单位存储文件数据
		每个表项(vec[i])表示文件数据的实际位置(簇)
			DIR_FstClus表示文件第0簇(扇区)的位置
			vec[DIR_FstClus]表示文件第1簇(扇区)的位置
			vec[vec[DIR_FstClus]]表示文件第2簇(扇区)的位置
			......
			
	实验：加载FAT12中的文件数据
		步骤：
			在根目录区查找目标文件对应的项
			获取目标文件的起始簇号和文件大小
			根据FAT表中记录的逻辑先后关系读取数据
	小贴士一
		FAT表中每个表项只占用12比特(1.5字节)
		FAT表一共记录了BPB_BytsPerSec * 9 * 2/3个表项
		可以使用一个short表示一个表项的值
		如果表项值大于等于0xFF8，则说明已经到达最后一个簇
		如果表项值等于0xFF7，则说明当前簇已经损坏
	小贴士二
		数据区起始簇(扇区)号为33，地址为0x4200
		数据区起始地址所对应的编号为2(不为0)
		因此，DIR_FstClus对应的地址为：
			0x4200 + (DIR_FstClus - 2) * 512

小结
	FAT12根目录区记录了文件的起始簇号和长度
	通过查找根目录区能够确定是否存在目标文件
	FAT12文件数据的组织使用了单链表的思想
		文件数据离散的分布于存储介质中
		文件数据通过FAT项进行关联

第6课 突破512字节的限制-上
	突破限制的准备工作
		辅助函数：字符串打印，软盘读取
		
	BIOS中的字符串打印
		指定打印参数(AX = 0x1301, BX = 0x0007)
		指定字符串的内存地址(ES:BP = 串地址)
		指定字符串的长度(CX = 串长度)
		中断调用( int 0x10 )
		
	字符串打印示例
		// 指定字符串地址
		mov ax, msg
		mov bp, ax
		mov ax, ds
		mov es, ax
		// 指定字符串长度
		mov cx, 6
		// 指定打印参数
		mov ax, 0x1301
		mov bx, 0x0007
		int 0x10
		
	汇编小贴士
		汇编中可以定义函数(函数名使用标签定义)
			call function
			函数体的最后一条指令为ret
		如果代码中定义了函数，那么需要定义栈空间
			用于保存关键寄存器的值
			栈顶地址通过sp寄存器保存
		汇编语言中的“常量定义”(equ)
			用法：const equ 0x7c00 ; #define const 0x7c00
			与dx(db, dw, dd)的区别：
				dx定义占用相应的内存空间
				equ定义不会占用任何内存空间

2，问题
	主引导程序中如何读取指定扇区处的数据？
	
	软盘的构造
		一个软盘有 2 个盘面，每个盘面对应 1 个磁头
		每个盘面被划分为若干个圆圈，成为柱面(磁道)
		每个柱面被划分为若干个扇区，每个扇区512字节
		
	3.5寸软盘的数据特性
		每个盘面一共有 80 个柱面(编号为 0-79)
		每个柱面有18个扇区(编号为 1-18)
		存储大小：
			2 * 80 * 18 * 512 = 1474560 bytes = 1440 KB
	
	软盘数据的读取
		软盘数据以扇区(512字节)为单位进行读取
		指定数据所在位置的磁头号，柱面号，扇区号
		计算公式：
			逻辑扇区号		商Q 磁头号：Q & 1	柱面号：Q >> 1
			---------  -->
			柱面扇区数		余R -> 扇区号：R + 1
			
	BIOS中软盘数据读取(int 0x13)
		中断号：0x13
		参数						功能说明
		AH=0x00					软驱复位
		DL=驱动器号(0表示A盘)
		
		AH=0x02					从磁盘将数据读入
		AL=长度(扇区)			ES:BX指向的内存中
		CH=柱面号 CL=起始扇区号
		DH=磁头号 DL=驱动器号
		ES:BX=目标地址 
		
	软盘数据读取流程：
	开始 -> 指定逻辑扇区号(AX)；指定读取扇区数(CX) -> 指定内存位置(ES:BX) -> 重置软驱状态
	-> 根据逻辑扇区计算：柱面号，磁头号，扇区号 -> int 0x13 -> ret
	
	汇编小贴士
		汇编中的16位除法操作(div)
			被除数放到 AX 寄存器
			除数放到通用寄存器或内存单元(8位)
			结果：商位于AL，余数位于AH
			
第7课 突破512字节的限制-中
1，整体思路
	将根目录区加载进入内存 -> 在根目录中查找目标文件 -> 存在？ ->(否) 打印错误信息 -> 结束
														(是) 通过FAT表项将文件内容加载进内存
														-> 执行跳转 -> 结束
														
	汇编小贴士
		汇编中的比较与跳转
			比较：
				cmp cx, 0 ;比较cx的值是否为0
			跳转：
				jz equal ;如果比较结果为真，则跳转到equal标签处
		访问栈空间中的栈顶数据
			不能使用sp直接访问栈顶数据
			通过其它通用寄存器间接访问栈顶数据	
			
小结
	可通过查找根目录区判断是否存在目标文件
		加载根目录区至内存中(ReadSector)
		遍历根目录区的每一项(FindEntry)
		通过每一项的前11个字节进行判断(MemCmp)
		当目标不存在时，打印错误信息
	
第8课 突破512字节的限制-下
1，最后的冲刺
	备份目标文件的目录信息(MenCpy)
	加载FAT表，并完成FAT表项的查找与读取(FatVec)
	
	MemCpy实现要点：拷贝方向(源地址和目的地址重叠)
	
	汇编小贴士
		汇编指令		功能
		ja			>
		jna			<=
		jb			<
		jnb			>=
		
		汇编中的16位乘法操作(mul)
			被乘数放到al寄存器
			乘数放到通用寄存器或内存单元(8位)
			相乘的结果放到AX寄存器中
			
	反编译
		ndisasm -o 0x7c00 boot.bin > boot.txt
		
第9课
1，实验步骤
	在虚拟软盘中创建体积较大的文本文件(Loader)
	将Loader的内容加载到BaseOfLoader地址处
	打印Loader中的文本(判断加载是否完全)
	
2，第一个Loader程序
	起始地址0x9000 (org 0x9000)
	通过int 0x10在屏幕上打印字符串
	
	汇编小贴士：标识寄存器
    15 14 13 12 11  10  9  8  7  6  5  4  3  2  1  0
                OF  DF  IF TF SF ZF    AF    PF    CF
    ZF:零标志位
    	判断运算的结果是否为0
    	当运算结果为0时，ZF位的值为1
    
    jxx代表了一个指令族，功能是根据标志位进行调整
    	jo当OF为1则跳转
    	jc当CF为1则跳转
    	jns当SF不为1则跳转
    	jz当ZF为2则跳转
    	je比较结果为相等则跳转(即：jz)
    	
小结
	Boot需要进行重构保证在512字节内完成功能
	在汇编程序中尽量确保函数调用前后通用寄存器的状态不变
	Boot成功加载Loader后将控制权转移
	Loader程序没有代码体积上的限制
	
第10课 实模式到保护模式-上
1，CPU历史的里程碑-8086
	地址线宽度为20位，可访问1M内存空间
	引入[段地址：偏移地址]的内存访问方式
		8086的段寄存器和通用寄存器为16位
		单个寄存器寻址最多访问64K的内存空间
		需要两个寄存器配合，完成所有内存空间的访问
		
	深入解析[段地址：偏移地址]
		硬件所做的工作
			段地址左移4位，构成20位的基地址(起始地址)
			基地址 + 偏移地址 = 实地址
		对于开发者的意义
			更有效的划分内存的功能(数据段，代码段，等)
			当出现程序地址冲突时，通过修改段地址解决冲突
			
2,8086时期应用程序中的问题
	1MB内存完全不够用(内存在任何时期都不够用)
	开发者在程序中大量使用内存回卷技术(HMA地址被使用)
	应用程序之间没有界限，相互之间随意干扰
		A程序可以随意访问B程序中的数据
		C程序可以修改系统调度程序的指令
		
	80286的登场
		8086已经有那么多应用程序了，所以必须兼容再兼容
		加大内存容量，增加地址线数量(24位)
		[段地址：偏移地址]的方式可以强化一下
			为每个段提供更多属性(如：范围，特权级，等)
			为每个段的定义提供固定方式
			
	80286之后的工作模式
	实模式							保护模式
	兼容8086的工作方式				新的工作方式
	实地址=(段寄存器<<4)+偏移地址		内存地址=段起始地址+偏移地址
	任意内存随意访问					每个段增加各种属性描述，保证安全性
	
3，初识保护模式
	每一段内存拥有一个属性定义(描述符Descriptor)
	所有段的属性定义构成一张表(描述符表 Descriptor Table)
	段寄存器保存的是属性定义在表中的索引(选择子Selector)
	......
	
	进入保护模式的方式
		定义描述符表
		打开A20地址线
		加载描述符表
		通知CPU进入保护模式
		
第11课 实模式到保护模式-中
1,80286的光荣退场
	历史意义
		引入了保护模式，为现代操作系统和应用程序奠定了基础
	奇葩设计
		段寄存器为24位，通用寄存器为16位(不伦不类)
			理论上，段寄存器中的数值可以直接作为段基址
			16位通用寄存器最多可访问64K的内存
			为了访问16M内存，必须不停切换段基址
			
2,80386的登场(计算机新时期的标识)
	32位地址总线(可支持4G的内存空间)
	段寄存器和通用寄存器都为32位
		任何一个寄存器都能访问到内存的任意角落
			开启了平坦内存模式的新时代
			段基址为0，使用通用寄存器访问4G内存空间
			
3，新时期的内存使用方式
	实模式
		兼容8086的内存使用方式(指哪打哪)
	分段模式
		通过[段地址：偏移地址]的方式将内存从功能上分段(数据段，代码段)
	平坦模式
		所有内存就是一个段[0：32位偏移地址]
		
4，段属性定义
	标识符		值		意义
	DA_32		0x4000	保护模式下32位段
	DA_DR		0x90	只读数据段
	DA_DRW		0x92	可读写数据段
	DA_DRWA		0x93	已访问可读写数据段
	DA_C		0x98	只执行代码段
	DA_CR		0x9A	可执行可读代码段
	DA_CCO		0x9C	只执行一致代码段
	DA_CCOR		0x9E	可执行可读一致代码段
	
5，选择子属性定义
	15--3			2	1--0
	描述符索引值		TI	RPL
	RPL -> SA_RPL0  equ  0
		   SA_RPL1  equ  1
		   SA_RPL2  equ  2
		   SA_RPL3  equ  3
		   
	TI -> SA_TIG  equ  0; GDT
		  SA_TIL  equ  4; LDT
		  
6，保护模式中的段定义
	%macro Descriptor 3							; 段基址，段界限，段属性
		dw  %2 & 0xFFFF							; 段界限1
		dw  %1 & 0xFFFF							; 段基址1
		db  (%1 >> 16) & 0xFF					; 段基址2
		dw  ((%2 >> 8) & 0xF00) | (%3 & 0xF0FF)	; 属性1 + 段界限2 + 属性2
		db  (%1 >> 24) & 0xFF					; 段基址3
	%endmacro									; 共8个字节
	注：dw = 2db，占两个字节空间
	
	段定义结构高32位：
	31-24  23  22  21  20  19-16  15  14-13  12  11-8  7-0
	段基址 G   D/B  L  AVL 段界限  P   DPL    S   TYPE  段基址
	31-24                  19-16                       23-16
	段定义结构低32位：
	31---16     15---0
	段基址15-0   段界限15-0
	
	保护模式中的段定义
	; GDT 定义
	;                         段基址   段界限            属性
	GDT_ENTRY   :  Descriptor  0,        0,                0
	CODE32_DES  :  Descriptor  0,    SegCode32Len - 1,    DA_C + DA_32
	; ......
	
	GdtLen   equ    $ - GDT_ENTRY    ; GDT 长度
	GdtPtr:
		dw   GdtLen - 1		; GDT 界限
		dd   0				; GDT 基地址，需要重新计算
		
7，汇编小贴士
	section关键字用于“逻辑的”定义一段代码集合
	section定义的代码段不同于[段地址：偏移地址]的代码段
		section定义的代码段仅限于源码中的代码段(代码节)
		[段地址：偏移地址]的代码段指内存中的代码段
		[SECTION .s1]
			var1  db  0x1
		[SECTION .s1]
			var2  db  0x2
		[SECTION .s1]
			var3  db  0x3
		==>>
		0x01020000  0x03
		  .s1        .s2
		.s1到.s2需要4字节对齐，需要.s1需要补4个0
		
	[bits 16]
		用于指示编译器将代码按照16位方式进行编译
	[bits 32]
		用于指示编译器将代码按照32位方式进行编译
		
	注意事项
		段描述表中的第0个描述符不使用(仅用于占位)
		代码中必须显示的指明16位代码段和32位代码段
		必须使用jmp指令从16位代码段跳转到32位代码段
		
8，问题
	为什么不直接使用标签定义描述符中的段基地址？
	为什么16位代码段到32位代码段必须无条件跳转？
	
	需要掌握的重点
		NASM将汇编文件当成一个独立的代码段编译
		汇编代码中的标签(Lable)代表的是段内偏移地址
		实模式下需要配合段寄存器中的值计算标签的物理地址
		
	小知识
		流水线技术
			处理器为了提高效率将当前指令和后续指令预取到流水线
			因此，可能同时预取的指令中既有16位代码又有32位代码
			为了避免将32位代码用16位的方式进行，需要刷新流水线
			无跳转跳转jmp能强制刷新流水线
			...
			
小结
	80386处理器是计算机发展史上的里程碑
	32位的寄存器和地址总线能够直接访问4G内存的任意角落
	需要在16位实模式中对GDT中的数据进行初始化
	代码中需要为GDT定义一个标识数据结构(GdtPtr)
	需要使用jmp指令从16位代码跳转到32位代码
